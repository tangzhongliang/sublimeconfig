package slack;

import com.google.gson.Gson;

import org.java_websocket.client.DefaultSSLWebSocketClientFactory;
import org.java_websocket.client.WebSocketClient;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.URI;
import java.net.URL;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public class TestSend {
    //public String url = "wss://mpmulti-me7x.advop.ricoh.co.jp.test.slack-msgs.com/websocket/9p8OkTT21Zd5b79lE1mRfiZlB6NW0HZkB7MC8NlrfjbfVwhagKvSeL_LYwZPnHl7UpXV1P6HEGZdsAPPXjVBubFMgDps-myryMLrWRXgQ8yOdwWc2bxc06mHxs1TDnHfn0J_xw-E1ZKwEhxZZklvxl2eld6C2aC53ErS9VZ9OTM=";
    public static void main(String[] args) {
        TestSend test = new TestSend();
//		test.sendMessage();
        test.startBot();
    }

    public void startBot() {
        final String url = getService();
        new Thread() {
            @Override
            public void run() {
                super.run();
                try {


                    HttpURLConnection connection;
                    Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("172.25.75.2", 8080));
//         new Web

                    WebSocketChatClient client = new WebSocketChatClient(new URI(url));
//                    trustAllHosts(client);
                    client.setProxy(new InetSocketAddress("172.25.75.2", 8080));
                    System.out.println("start");
                    boolean b = client.connectBlocking();
                    System.out.println("over" + b);
//
//                    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//                    while (true) {
//                        String line = reader.readLine();
//                        if (line.equals("close")) {
//                            client.close();
//                        } else {
//                            client.send(line);
//                        }
//                    }
                    Socket socket = null;
//                    socket = new Socket();
//                    socket.connect(new InetSocketAddress(url, 443));
//                    InputStream is = socket.getInputStream();
//                    OutputStream os = socket.getOutputStream();

//                    InputStream is = connection.getInputStream();
//                    OutputStream os = connection.getOutputStream();
//                    byte[] buffer = new byte[1024];
//                    int len;
//                    while (true) {
//                        len = is.read(buffer);
//                        if (len != -1) {
//                            System.out.println(new String(buffer, 0, len));
//                        }
//                        try {
//                            Thread.sleep(1000);
//                        } catch (InterruptedException e) {
//                            // TODO Auto-generated catch block
//                            e.printStackTrace();
//                        }
//                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();

    }

    private static void trustAllHosts(WebSocketClient appClient) {
        // Create a trust manager that does not validate certificate chains
        TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() {
                return new X509Certificate[]{};
            }

            public void checkClientTrusted(X509Certificate[] chain,
                                           String authType) throws CertificateException {
            }

            public void checkServerTrusted(X509Certificate[] chain,
                                           String authType) throws CertificateException {
            }
        }};
        // Install the all-trusting trust manager
        try {
            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            appClient.setWebSocketFactory(new DefaultSSLWebSocketClientFactory(sc));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendMessage() {
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("172.25.75.2", 8080));
        SlackApi api = new SlackApi("https://hooks.slack.com/services/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", proxy);
//		SlackApi api = new SlackApi(getService());
        api.call(new SlackMessage("my message"));
    }

    public String getRTM() {
        HttpURLConnection connection = null;
        try {
            // Create connection
            final URL url = new URL("https://slack.com/api/rtm.start?token=xoxb-163906966384-EmuBPOcC8OplzMMdW2a50jtW&pretty=1");
//            final URL url = new URL("https://www.baidu.com");
            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("172.25.75.2", 8080));
            connection = (HttpURLConnection) url.openConnection(proxy);
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(10000);
            connection.setUseCaches(false);
            connection.setDoInput(true);
//            connection.setDoOutput(true);

//
//            final String payload = PAYLOAD
//                    + URLEncoder.encode(message.toString(), UTF_8);


            // Send request
//            final DataOutputStream wr = new DataOutputStream(
//                    connection.getOutputStream());
//            wr.writeBytes(payload);
//            wr.flush();
//            wr.close();

            // Get Response
            final InputStream is = connection.getInputStream();
            final BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\n');
            }
            rd.close();
            System.out.println(response.toString());
            return response.toString();
        } catch (Exception e) {
            throw new SlackException(e);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    public String getService() {
        Gson gson = new Gson();
        String response = getRTM();
        JSONObject jo = null;
        String url = null;
        try {
            jo = new JSONObject(response);
            url = jo.getString("url");
        } catch (JSONException e) {
            e.printStackTrace();
        }
        System.out.println(url);
        String replace = url.replace("wss", "ws");
        System.out.println(replace);
        return url;
    }
}
